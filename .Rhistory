table(addhealth_public4_sub$workDayDownAP)
library(magrittr)
library(dplyr)
library(tidyverse)
addhealth_public4_sub %>%
mutate(datetime_str = paste(workDayUp, workDayUpAP),
datetime = as.POSIXct(strptime(datetime_str, format = "%d/%m/%y %I:%M %p")),
datetime_military = strftime(datetime, format = "%Y-%m-%d %H:%M")) %>%
select(-datetime_str)  # Trim output...
library(tidyverse)
# install.packages("gsheet")
# Height vs Hand Span
library(gsheet)
install.packages("gsheet")
library(tidyverse)
# install.packages("gsheet")
# Height vs Hand Span
library(gsheet)
dat_hand_url <- "docs.google.com/spreadsheets/d/1_lax2SqNMhfGBpw1MBDnKiB1w2J5oC6LWvG7Gf2acWY"
dat_hand <-
gsheet2tbl(dat_hand_url) %>%
as.data.frame() %>%
na.omit() %>%
mutate(
Gender_M_F = factor(Gender_M_F, levels = c("F", "M"))
)
str(dat_hand)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
install.packages("GGally")
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
# Memory Scores
library(gsheet)
dat_memory_url <- "docs.google.com/spreadsheets/d/16EyOMIL0WGNbt7TTJqm7_aroFslUysOVYQTWiZa44KA"
dat_memory <-
gsheet2tbl(dat_memory_url) %>%
as.data.frame() %>%
na.omit() %>%
mutate(
Gender_M_F            = factor(Gender_M_F, levels = c("F", "M"))
, UGrad_Grad            = factor(UGrad_Grad)
, EnglishNativeLanguage = factor(EnglishNativeLanguage)
)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
# Memory Scores
library(gsheet)
dat_memory_url <- "docs.google.com/spreadsheets/d/16EyOMIL0WGNbt7TTJqm7_aroFslUysOVYQTWiZa44KA"
dat_memory <-
gsheet2tbl(dat_memory_url) %>%
as.data.frame() %>%
na.omit() %>%
mutate(
Gender_M_F            = factor(Gender_M_F, levels = c("F", "M"))
, UGrad_Grad            = factor(UGrad_Grad)
, EnglishNativeLanguage = factor(EnglishNativeLanguage)
)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p2 <- ggpairs(dat_memory %>% select(Gender_M_F, UGrad_Grad, EnglishNativeLanguage, Score_1, Guessed_2, Score_2)
, mapping = ggplot2::aes(colour = EnglishNativeLanguage) #, shape = UGrad_Grad)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p2)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Score_1, y = Guessed_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Guessed_2, y = Score_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Score_1, y = Score_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p2 <- ggpairs(dat_memory %>% select(Gender_M_F, UGrad_Grad, EnglishNativeLanguage, Score_1, Guessed_2, Score_2)
, mapping = ggplot2::aes(colour = EnglishNativeLanguage) #, shape = UGrad_Grad)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p2)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p2 <- ggpairs(dat_memory %>% select(Gender_M_F, UGrad_Grad, EnglishNativeLanguage, Score_1, Guessed_2, Score_2)
, mapping = ggplot2::aes(colour = EnglishNativeLanguage) #, shape = UGrad_Grad)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p2)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
, upper = list(params = list(corSize = 6))
)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Score_1, y = Guessed_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Guessed_2, y = Score_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
library(ggplot2)
p <- ggplot(dat_memory, aes(x = Score_1, y = Score_2))
p <- p + geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5)
p <- p + geom_jitter(aes(colour = EnglishNativeLanguage), position = position_jitter(width = 0.1), alpha = 1/2)
p <- p + geom_smooth(method = lm)
p <- p + scale_y_continuous(limits=c(0, 15))
p <- p + scale_x_continuous(limits=c(0, 15))
p <- p + coord_fixed(ratio = 1)
print(p)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p2 <- ggpairs(dat_memory %>% select(Gender_M_F, UGrad_Grad, EnglishNativeLanguage, Score_1, Guessed_2, Score_2)
, mapping = ggplot2::aes(colour = EnglishNativeLanguage) #, shape = UGrad_Grad)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p2)
library(tidyverse)
# install.packages("gsheet")
# Height vs Hand Span
library(gsheet)
dat_hand_url <- "docs.google.com/spreadsheets/d/1_lax2SqNMhfGBpw1MBDnKiB1w2J5oC6LWvG7Gf2acWY"
dat_hand <-
gsheet2tbl(dat_hand_url) %>%
as.data.frame() %>%
na.omit() %>%
mutate(
Gender_M_F = factor(Gender_M_F, levels = c("F", "M"))
)
str(dat_hand)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p1)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
#, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p1)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
#, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p1)
# Plot the data using ggplot and ggpairs
library(ggplot2)
library(GGally)
p1 <- ggpairs(dat_hand %>% select(Gender_M_F, Height_in, HandSpan_cm)
, mapping = ggplot2::aes(colour = Gender_M_F)
, lower = list(continuous = "smooth")
, diag  = list(continuous = "density")
#, upper = list(params = list(corSize = 6))
)
print(p1)
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
fileurl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
pwd
pwd()
getwd()
setwd()
getwd()
setwd("/Users/vkoushikmuthyapu/desktop/UCI_HAR_Dataset")
setwd("/Users/vkoushikmuthyapu/desktop/UCI_HAR_Dataset/")
setwd("/Users/vkoushikmuthyapu/desktop")
ls
fileurl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
dim(activity_L)
getwd()
setwd("/Users/vkoushikmuthyapu/desktop/UCI_HAR_Dataset")
getwd()
activity_L <- read.table("activity_labels.txt")
dim(activity_L)
features <- read.table("featuers.txt")
features <- read.table("features.txt")
text_X <- read.table("/test/X_test.txt")
text_X <- read.table("./test/X_test.txt")
test_Y <- read.table("./test/Y_test.txt")
subject_Test <- read.table("./test/subject_test.txt")
train_X <- read.table("./train/X_train")
train_X <- read.table("./train/X_train.txt")
train_Y <- read.table("./train/Y_train.txt")
subject_Train <- read.table("./train/subject_train.txt")
#1.Merges the training and the test sets to create one data set.
###############################################################
Temp_X <- rbind(train_X,text_X)
Temp_Y <- rbind(train_Y,test_Y)
Test_Train_Set <- cbind(Temp_X, Temp_Y)
Temp_subject <- rbind(subject_Train, subject_Test)
Test_Train_Set <- cbind(Temp_subject, Temp_X, Temp_Y)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
cols <- grep(".*Mean.*|.*Std.*", features[,2])
head(cols)
cols
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
cols <- grep("Mean()|Std()", features$signal, value = TRUE)
head(cols)
head(features)
str(features)
head(
head(cols)
head(cols)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
cols <- grep(".*Mean.*|.*Std.*", features[,2])
head(cols)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
cols <- grep("Mean()|Std()", features[,2])
head(cols)
str(cols)
names(xDataSet_mean_std) <- read.table("features.txt")[grep("-(mean|std)\\(\\)", features.txt[, 2]), 2]
names(xDataSet_mean_std) <- read.table("features.txt")[grep("-(mean|std)\\(\\)", features[, 2]), 2]
names(xDataSet_mean_std) <- [grep("-(mean|std)\\(\\)", features[, 2]), 2]
names(xDataSet_mean_std) <- features[grep("-(mean|std)\\(\\)", features[, 2]), 2]
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
#cols <- grep("Mean()|Std()", features[,2])
#str(cols)
xDataSet_mean_std <- features[, grep("-(mean|std)\\(\\)", features[, 2])]
#names(xDataSet_mean_std) <- features[grep("-(mean|std)\\(\\)", features[, 2]), 2]
View(xDataSet_mean_std)
#names(xDataSet_mean_std) <- features[grep("-(mean|std)\\(\\)", features[, 2]), 2]
#View(xDataSet_mean_std)
dim(xDataSet_mean_std)
length(index)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
#cols <- grep("Mean()|Std()", features[,2])
#str(cols)
index <- grep("mean\\(\\)|std\\(\\)", features[,2]) ##getting features indeces which contain mean() and std() in their name
length(index)
dim(Temp_X)
Temp_X<-temp_X[,index]
Temp_X<-Temp_X[,index]
dim(Temp_X)
head(Temp_X)
dim(Temp_X)
#3.Uses descriptive activity names to name the activities in the data set
#########################################################################
Temp_Y[, 1] <- activity_L[Temp_Y[, 1], 2]
head(Temp_Y)
index
Temp_X<-Temp_X[,Mean_std]
Temp_X<-Temp_X[ ,Mean_std]
Mean_std
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
Mean_std <- grep("mean\\(\\)|std\\(\\)", features[,2])
Mean_std
#4.Appropriately labels the data set with descriptive variable names
####################################################################
names<-features[Mean_std,2] ## getting names for variables
names(X)<-names ## updating colNames for new dataset
names(Temp_subject)<-"SubjectID"
names(Temp_Y)<-"Activity"
CleanedData<-cbind(Subject, Y, X)
CleanedData<-cbind(Subject, Temp_Y, Temp_X)
head(CleanedData[,c(1:4)]) ## first 5 columns
CleanedData <- cbind(Subject, Temp_Y, Temp_X)
head(CleanedData[,c(1:4)]) ## first 5 columns
head(TidyData[,c(1:4)]) ## first 5 columns
TidyData <- cbind(Temp_subject, Temp_Y, Temp_X)
head(TidyData[,c(1:4)]) ## first 5 columns
#4.Appropriately labels the data set with descriptive variable names
####################################################################
names<-features[Merge_Set ,2] ## getting names for variables
Merged_Set <- cbind(Temp_subject, Temp_X, Temp_Y)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
Mean_std <- grep("mean\\(\\)|std\\(\\)", features[,2])
Mean_std
Temp_X<-Temp_X[ ,Mean_std]
#3.Uses descriptive activity names to name the activities in the data set
#########################################################################
Temp_Y[, 1] <- activity_L[Temp_Y[, 1], 2]
Temp_X <- Temp_X [ ,Mean_std]
#3.Uses descriptive activity names to name the activities in the data set
#########################################################################
Temp_Y[, 1] <- activity_L[Temp_Y[, 1], 2]
head(Temp_Y)
#4.Appropriately labels the data set with descriptive variable names
####################################################################
names<-features[Merge_Set ,2] ## getting names for variables
names(Temp_X)<-names ## updating colNames for new dataset
names(Temp_subject)<-"SubjectID"
Temp_X <- Temp_X [ ,Mean_std]
Merged_Set <- cbind(Temp_subject, Temp_X, Temp_Y)
#2.Extracts only the measurements on the mean and standard deviation for each measurement.
##########################################################################################
Mean_std <- grep("mean\\(\\)|std\\(\\)", features[,2])
Mean_std
Temp_X <- Temp_X [ ,Mean_std]
#3.Uses descriptive activity names to name the activities in the data set
#########################################################################
Temp_Y[, 1] <- activity_L[Temp_Y[, 1], 2]
head(Temp_X)
#3.Uses descriptive activity names to name the activities in the data set
#########################################################################
Temp_Y[, 1] <- activity_L[Temp_Y[, 1], 2]
head(Temp_Y)
#4.Appropriately labels the data set with descriptive variable names
####################################################################
names<-features[Merge_Set ,2] ## getting names for variables
#4.Appropriately labels the data set with descriptive variable names
####################################################################
names<-features[Merge_Set ,2] ## getting names for variables
names(Temp_X)<-names ## updating colNames for new dataset
names(Temp_subject)<-"SubjectID"
names(Temp_Y)<-"Activity"
TidyData <- cbind(Temp_subject, Temp_Y, Temp_X)
head(TidyData[,c(1:4)]) ## first 5 columns
head(TidyData2[order(SubjectID)][,c(1:4), with = FALSE],12)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
write.table(TidyData2, file = "Tidy.txt", row.names = FALSE)
head(TidyData2[order(SubjectID)][,c(1:4), with = FALSE],12)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
write.table(TidyData2, file = "Tidy.txt", row.names = FALSE)
head(TidyData2[order(SubjectID)][,c(1:4), with = FALSE],12)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
library(data.table)
fileurl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
write.table(TidyData2, file = "Tidy.txt", row.names = FALSE)
install.packages("data.table", type="source", dependencies=TRUE)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
write.table(TidyData2, file = "Tidy.txt", row.names = FALSE)
head(TidyData2[order(SubjectID)][,c(1:4), with = FALSE],12)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
library(dplyr)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
install.packages("data.table")
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table::(TidyData)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table::TidyData
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData2)
write.table(TidyData2, file = "Tidy.txt", row.names = FALSE)
head(TidyData_2[order(SubjectID)][,c(1:4), with = FALSE],12)
TidyData_2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table(TidyData)
TidyData_2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData_2)
write.table(TidyData_2, file = "Tidy.txt", row.names = FALSE)
head(TidyData_2[order(SubjectID)][,c(1:4), with = FALSE],12)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.frame(TidyData)
TidyData_2 <- TidyData[, lapply(.SD, mean), by = 'SubjectID,Activity']
dim(TidyData_2)
write.table(TidyData_2, file = "Tidy.txt", row.names = FALSE)
head(TidyData_2[order(SubjectID)][,c(1:4), with = FALSE],12)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-data.table::(TidyData)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-(data.table::TidyData)
#5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#################################################################################################################################################
TidyData<-(data.table(TidyData))
